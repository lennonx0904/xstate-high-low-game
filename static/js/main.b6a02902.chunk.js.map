{"version":3,"sources":["components/Card/index.tsx","components/Button/index.tsx","constant/index.ts","machine/index.ts","utils/index.ts","container/start.tsx","container/inactive.tsx","container/end.tsx","container/index.tsx","App.tsx","index.tsx"],"names":["Card","props","color","content","w","h","px","py","bgColor","borderRadius","boxShadow","flex","fontSize","Button","onClick","colorScheme","text","leftIcon","marginTop","mt","isFullWidth","INACTIVE","START","CHOOSED","END","gameMachine","createMachine","initial","context","computerNumber","userNumber","userChoice","isUserWin","states","on","target","actions","assign","event","generateRandomNumber","Math","floor","random","StartComponent","InactiveComponent","EndComponent","spacing","align","Game","useMachine","state","send","isInactive","value","isStart","isEnd","onStartBtnClick","useEffect","isUserChooseHigher","calculateIsUserWin","pt","direction","mb","mr","justify","maxW","onChooseBtnClick","App","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.b6a02902.chunk.js","sourcesContent":["import { Center, Heading } from \"@chakra-ui/react\";\n\nimport { CardProps } from \"interface\";\n\nconst Card = (props: CardProps) => {\n  const { color, content } = props;\n\n  return (\n    <Center\n      w=\"full\"\n      h=\"150px\"\n      px=\"24px\"\n      py=\"16px\"\n      bgColor=\"white\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      flex={1}\n    >\n      <Heading fontSize=\"54px\" color={color}>\n        {content}\n      </Heading>\n    </Center>\n  );\n};\n\nexport default Card;\n","import { Button as ButtonComponent } from \"@chakra-ui/react\";\n\nimport { ButtonProps } from \"interface\";\n\nconst Button = (props: ButtonProps) => {\n  const { onClick, colorScheme, text, leftIcon, marginTop } = props;\n\n  return (\n    <ButtonComponent\n      mt={marginTop}\n      colorScheme={colorScheme}\n      leftIcon={leftIcon}\n      isFullWidth\n      onClick={onClick}\n    >\n      {text}\n    </ButtonComponent>\n  );\n};\n\nexport default Button;\n","export const INACTIVE = \"INACTIVE\";\nexport const START = \"START\";\nexport const CHOOSED = \"CHOOSED\";\nexport const END = \"END\";\n","import { createMachine, assign } from \"xstate\";\nimport { ContextProps } from \"interface\";\nimport { INACTIVE, START, CHOOSED, END } from \"constant\";\n\nexport const gameMachine = createMachine<ContextProps>({\n  initial: INACTIVE,\n  context: {\n    computerNumber: 0,\n    userNumber: 0,\n    userChoice: \"\",\n    isUserWin: false,\n  },\n  states: {\n    [INACTIVE]: {\n      on: {\n        START: {\n          target: START,\n          actions: assign({\n            computerNumber: (context: ContextProps, event) =>\n              event.computerNumber,\n          }),\n        },\n      },\n    },\n    [START]: {\n      on: {\n        [CHOOSED]: {\n          target: CHOOSED,\n          actions: assign({\n            userChoice: (context: ContextProps, event) => event.userChoice,\n            userNumber: (context: ContextProps, event) => event.userNumber,\n          }),\n        },\n      },\n    },\n    [CHOOSED]: {\n      on: {\n        [END]: {\n          target: END,\n          actions: assign({\n            isUserWin: (context: ContextProps, event) => event.isUserWin,\n          }),\n        },\n      },\n    },\n    [END]: {\n      on: {\n        [START]: {\n          target: START,\n          actions: assign({\n            computerNumber: (context: ContextProps, event) =>\n              event.computerNumber,\n            userNumber: (context: ContextProps, event) => 0,\n          }),\n        },\n      },\n    },\n  },\n});\n","export const generateRandomNumber = () => Math.floor(Math.random() * 10) + 1;\n\nexport const calculateIsUserWin = (\n  computerNumber: number,\n  userNumber: number,\n  userChoice: string\n) => {\n  const isUserChooseHigher = userChoice === \"higher\";\n  if (\n    (isUserChooseHigher && userNumber > computerNumber) ||\n    (!isUserChooseHigher && userNumber < computerNumber)\n  ) {\n    return true;\n  }\n\n  return false;\n};","import { RiArrowDownSLine, RiArrowUpSLine } from \"react-icons/ri\";\n\nimport { Button } from \"components\";\nimport { StateComponentProps } from \"interface\";\n\nconst StartComponent = (props: StateComponentProps) => {\n  const { onClick } = props;\n\n  return (\n    <>\n      <Button\n        onClick={() => onClick(\"higher\")}\n        colorScheme=\"twitter\"\n        leftIcon={<RiArrowUpSLine />}\n        text=\"Higher\"\n        marginTop=\"32px\"\n      />\n      <Button\n        onClick={() => onClick(\"lower\")}\n        colorScheme=\"facebook\"\n        leftIcon={<RiArrowDownSLine />}\n        text=\"Lower\"\n        marginTop=\"8px\"\n      />\n    </>\n  );\n};\n\nexport default StartComponent;\n","import { Box } from \"@chakra-ui/react\";\nimport { Button } from \"components\";\nimport { StateComponentProps } from \"interface\";\n\nconst InactiveComponent = (props: StateComponentProps) => {\n  const { onClick } = props;\n\n  return (\n    <Box mt=\"64px\">\n      <Button onClick={onClick} colorScheme=\"blue\" text=\"Start Game\" />\n    </Box>\n  );\n};\n\nexport default InactiveComponent;\n","import { Heading, Stack } from \"@chakra-ui/react\";\n\nimport { Button } from \"components\";\nimport { StateComponentProps } from \"interface\";\n\nconst EndComponent = (props: StateComponentProps) => {\n  const { onClick, isUserWin } = props;\n\n  return (\n    <Stack mt=\"24px\" spacing=\"16px\">\n      {isUserWin ? (\n        <Heading color=\"twitter.300\" align=\"center\">\n          WIN!\n        </Heading>\n      ) : (\n        <Heading color=\"red.300\" align=\"center\">\n          LOSE!\n        </Heading>\n      )}\n      <Button colorScheme=\"blue\" text=\" Play Again\" onClick={onClick} />\n    </Stack>\n  );\n};\n\nexport default EndComponent;\n","import { useEffect } from \"react\";\nimport { Box, Flex, Center, Heading } from \"@chakra-ui/react\";\nimport { useMachine } from \"@xstate/react\";\n\nimport { Card } from \"components\";\nimport { gameMachine } from \"machine\";\nimport { generateRandomNumber, calculateIsUserWin } from \"utils\";\nimport { INACTIVE, START, CHOOSED, END } from \"constant\";\nimport StartComponent from \"./start\";\nimport InactiveComponent from \"./inactive\";\nimport EndComponent from \"./end\";\n\nconst Game = () => {\n  const [state, send] = useMachine(gameMachine);\n\n  const computerNumber = state.context.computerNumber;\n  const userNumber = state.context.userNumber;\n  const isUserWin = state.context.isUserWin;\n\n  const isInactive = state.value === INACTIVE;\n  const isStart = state.value === START;\n  const isEnd = state.value === END;\n\n  const onStartBtnClick = () =>\n    send(START, { computerNumber: generateRandomNumber(), userNumber: 0 });\n\n  const onChooseBtnClick = (userChoice: string) =>\n    send(CHOOSED, {\n      userChoice,\n      userNumber: generateRandomNumber(),\n    });\n\n  useEffect(() => {\n    const isUserWin = calculateIsUserWin(\n      computerNumber,\n      userNumber,\n      state.context.userChoice\n    );\n    state.context.userChoice && send(END, { isUserWin });\n  }, [computerNumber, userNumber, state]);\n\n  return (\n    <Box bgColor=\"#f3f3f3\" h=\"100vh\">\n      <Center pt=\"120px\">\n        <Flex w=\"400px\" px=\"64px\" direction=\"column\" align=\"center\">\n          <Flex mb=\"64px\">\n            <Heading mr=\"16px\" fontSize=\"36px\" color=\"twitter.500\">\n              High\n            </Heading>\n            <Heading fontSize=\"36px\" color=\"facebook.500\">\n              Low\n            </Heading>\n          </Flex>\n          <Flex w=\"full\" justify=\"space-between\">\n            <Flex maxW=\"120px\" flex={1}>\n              <Card color=\"gray.500\" content={computerNumber || \"?\"} />\n            </Flex>\n            <Flex maxW=\"120px\" flex={1} direction=\"column\">\n              <Card color=\"blue.500\" content={userNumber || \"?\"} />\n              {isStart && (\n                <StartComponent\n                  onClick={(userChoice?: string) =>\n                    onChooseBtnClick(userChoice ?? \"\")\n                  }\n                />\n              )}\n            </Flex>\n          </Flex>\n          {isInactive && <InactiveComponent onClick={onStartBtnClick} />}\n          {isEnd && (\n            <EndComponent onClick={onStartBtnClick} isUserWin={isUserWin} />\n          )}\n        </Flex>\n      </Center>\n    </Box>\n  );\n};\n\nexport default Game;\n","import Game from \"./container\";\n\nconst App = () => <Game />;\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}